// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// User model
model Users {
  id                 Int           @id @default(autoincrement())
  email              String        @unique
  password           String?
  username           String?       @unique
  firstname          String?
  lastname           String?
  bio                String?
  timezone           String?
  googleProfileId    String?
  microsoftProfileId String?
  emailVerified      Boolean       @default(false)
  isDeleted          Boolean       @default(false)
  onboarding         Json          @default("{\"isOnboarded\": false}")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Calendar           Calendar[]
  EventType          EventType[]
  Event              Event[]
  Attendees          Attendees[]
  AccessToken        AccessToken[]
}

model Calendar {
  id        Int     @id @default(autoincrement())
  name      String
  ownerId   Int
  owner     Users?  @relation(fields: [ownerId], references: [id])
  isPrimary Boolean @default(false)
  isDeleted Boolean @default(false)
  Event     Event[]
}

model EventType {
  id           Int     @id @default(autoincrement())
  name         String
  appGenerated Boolean
  ownerId      Int
  owner        Users?  @relation(fields: [ownerId], references: [id])
  isDeleted    Boolean @default(false)
  Event        Event[]
}

model Event {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  location       String?
  startTime      DateTime
  endTime        DateTime
  ownerId        Int
  owner          Users?           @relation(fields: [ownerId], references: [id])
  eventTypeId    Int
  EventType      EventType?       @relation(fields: [eventTypeId], references: [id])
  calendarId     Int
  Calendar       Calendar?        @relation(fields: [calendarId], references: [id])
  isPrivate      Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  RecurringEvent RecurringEvent[]
  Attendees      Attendees[]
}

model RecurringEvent {
  id                 Int                 @id @default(autoincrement())
  eventId            Int
  event              Event               @relation(fields: [eventId], references: [id])
  recurringFrequency RecurringFrequency?
  interval           Int?
  count              Int?
  daysOfWeek         String?
  weeksOfMonth       String?
  daysOfMonth        String?
  monthsOfYear       String?
}

enum RecurringFrequency {
  YEARLY
  MONTHLY
  WEEKLY
  DAILY
  HOURLY
}

model Attendees {
  id         Int   @id @default(autoincrement())
  eventId    Int
  event      Event @relation(fields: [eventId], references: [id])
  attendeeId Int
  attendee   Users @relation(fields: [attendeeId], references: [id])
}

enum CalendarType {
  GOOGLECAL
  OUTLOOKCAL
}

enum TokenType {
  BEARER
}

model AccessToken {
  id              Int          @id @default(autoincrement())
  userId          Int
  user            Users        @relation(fields: [userId], references: [id])
  associatedEmail String
  tokenType       TokenType
  calendarId      String
  calendarType    CalendarType
  scope           String
  expiry          DateTime
  accessToken     String
  refreshToken    String
  isDeleted       Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, calendarId], name: "AccessToken_userId_calendarId_uindex")
}
